// <auto-generated />
using System;
using EF_01_.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EF_01_.Migrations
{
    [DbContext(typeof(ITIContext))]
    [Migration("20250828215806_One2Many")]
    partial class One2Many
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EF_01_.Models.Course", b =>
                {
                    b.Property<int>("TopID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("NVarChar(100)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("VarChar(20)");

                    b.Property<int?>("TopicID")
                        .HasColumnType("int");

                    b.HasKey("TopID");

                    b.HasIndex("TopicID");

                    b.ToTable("Courses", (string)null);
                });

            modelBuilder.Entity("EF_01_.Models.Course_Inst", b =>
                {
                    b.Property<int>("inst_ID")
                        .HasColumnType("int");

                    b.Property<int>("Course_ID")
                        .HasColumnType("int");

                    b.Property<int?>("courseTopID")
                        .HasColumnType("int");

                    b.Property<int>("evaluate")
                        .HasColumnType("int");

                    b.Property<int?>("instructorDepID")
                        .HasColumnType("int");

                    b.HasKey("inst_ID", "Course_ID");

                    b.HasIndex("courseTopID");

                    b.HasIndex("instructorDepID");

                    b.ToTable("Course_Insts");
                });

            modelBuilder.Entity("EF_01_.Models.Department", b =>
                {
                    b.Property<int>("ins_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("HiringDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("HireDate");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ins_id");

                    b.ToTable("Departments", (string)null);
                });

            modelBuilder.Entity("EF_01_.Models.Instructor", b =>
                {
                    b.Property<int>("DepID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVarChar(100)");

                    b.Property<decimal>("Bouns")
                        .HasColumnType("decimal(12,2)");

                    b.Property<int?>("Departmentins_id")
                        .HasColumnType("int");

                    b.Property<decimal>("HourRate")
                        .HasColumnType("decimal(12,2)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("VarChar(20)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("DepID");

                    b.HasIndex("Departmentins_id");

                    b.ToTable("Instructors", (string)null);
                });

            modelBuilder.Entity("EF_01_.Models.Stud_Course", b =>
                {
                    b.Property<int>("stud_ID")
                        .HasColumnType("int");

                    b.Property<int>("Course_ID")
                        .HasColumnType("int");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<int?>("courseTopID")
                        .HasColumnType("int");

                    b.Property<int?>("studentId")
                        .HasColumnType("int");

                    b.HasKey("stud_ID", "Course_ID");

                    b.HasIndex("courseTopID");

                    b.HasIndex("studentId");

                    b.ToTable("Stud_Courses");
                });

            modelBuilder.Entity("EF_01_.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVarChar(100)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("DepId")
                        .HasColumnType("int");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VarChar(20)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VarChar(20)");

                    b.HasKey("Id");

                    b.HasIndex("DepId");

                    b.ToTable("Students", (string)null);
                });

            modelBuilder.Entity("EF_01_.Models.Topic", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ID");

                    b.ToTable("Topics", (string)null);
                });

            modelBuilder.Entity("EF_01_.Models.Course", b =>
                {
                    b.HasOne("EF_01_.Models.Topic", null)
                        .WithMany("Courses")
                        .HasForeignKey("TopicID");
                });

            modelBuilder.Entity("EF_01_.Models.Course_Inst", b =>
                {
                    b.HasOne("EF_01_.Models.Course", "course")
                        .WithMany("course_Insts")
                        .HasForeignKey("courseTopID");

                    b.HasOne("EF_01_.Models.Instructor", "instructor")
                        .WithMany("course_Insts")
                        .HasForeignKey("instructorDepID");

                    b.Navigation("course");

                    b.Navigation("instructor");
                });

            modelBuilder.Entity("EF_01_.Models.Department", b =>
                {
                    b.HasOne("EF_01_.Models.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("ins_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("EF_01_.Models.Instructor", b =>
                {
                    b.HasOne("EF_01_.Models.Department", null)
                        .WithMany("Instructors")
                        .HasForeignKey("Departmentins_id");
                });

            modelBuilder.Entity("EF_01_.Models.Stud_Course", b =>
                {
                    b.HasOne("EF_01_.Models.Course", "course")
                        .WithMany("Stud_Courses")
                        .HasForeignKey("courseTopID");

                    b.HasOne("EF_01_.Models.Student", "student")
                        .WithMany("Stud_Courses")
                        .HasForeignKey("studentId");

                    b.Navigation("course");

                    b.Navigation("student");
                });

            modelBuilder.Entity("EF_01_.Models.Student", b =>
                {
                    b.HasOne("EF_01_.Models.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EF_01_.Models.Course", b =>
                {
                    b.Navigation("Stud_Courses");

                    b.Navigation("course_Insts");
                });

            modelBuilder.Entity("EF_01_.Models.Department", b =>
                {
                    b.Navigation("Instructors");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("EF_01_.Models.Instructor", b =>
                {
                    b.Navigation("course_Insts");
                });

            modelBuilder.Entity("EF_01_.Models.Student", b =>
                {
                    b.Navigation("Stud_Courses");
                });

            modelBuilder.Entity("EF_01_.Models.Topic", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
